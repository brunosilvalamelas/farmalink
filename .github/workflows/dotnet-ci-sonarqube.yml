name: .NET CI with SonarQube and Coverage

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-analyze:
    runs-on: windows-latest

    steps:
      # 2. Checkout code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup .NET
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # 3. Setup JDK (required by SonarScanner)
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"

      # 4. Install ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # 5. Cache SonarScanner
      - name: Cache SonarScanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner

      # 6. Install SonarScanner
      - name: Install SonarScanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner

      # 7. Begin SonarQube analysis
      - name: Begin SonarQube analysis
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ${{ runner.temp }}\scanner\dotnet-sonarscanner begin `
            /k:"brunosilvalamelas_farmalink" `
            /o:"brunosilvalamelas" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="BackendTests/coverage/coverage.xml"
        # 8. Build the solution
      - name: Show current directory and files
        run: |
          echo "Current directory:"
          pwd
          echo ""
          echo "List of files:"
          dir

      - name: Build
        run: dotnet build "Backend/Backend.sln" --no-restore

      # 9. Run tests with coverage
      - name: Run tests
        run: dotnet test "BackendTests/BackendTests.csproj" --settings BackendTests/coverlet.runsettings

      # 10. Generate HTML coverage report (optional)
      - name: Generate HTML coverage report
        run: reportgenerator -reports:BackendTests/coverage/coverage.xml -targetdir:BackendTests/coverage-report -reporttypes:Html

      # 11. Upload coverage report as artifact (optional)
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: BackendTests/coverage-report

      # 12. End SonarQube analysis
      - name: End SonarQube analysis
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ${{ runner.temp }}\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
